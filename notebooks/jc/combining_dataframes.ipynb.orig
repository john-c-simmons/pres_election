{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-183-daeb3a885d6e>:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  pres_df2016['fips'] = pres_df2016['FIPS']\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "ca2015 = pd.read_csv('../../data/vax_df/ca_vax_df_2015.csv')\n",
    "fl2015 = pd.read_csv('../../data/vax_df/fl_vax_df_2015.csv')\n",
    "il2015 = pd.read_csv('../../data/vax_df/il_vax_df_2015.csv')\n",
    "tx2015 = pd.read_csv('../../data/vax_df/tx_vax_df_2015.csv')\n",
    "ca2018 = pd.read_csv('../../data/vax_df/ca_vax_df_2018.csv')\n",
    "fl2019 = pd.read_csv('../../data/vax_df/fl_vax_df_2019.csv')\n",
    "il2018 = pd.read_csv('../../data/vax_df/il_vax_df_2018.csv')\n",
    "tx2018 = pd.read_csv('../../data/vax_df/tx_vax_df_2018.csv')\n",
    "mi2018 = pd.read_csv('../../data/vax_df/mi_vax_df_2019.csv')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "pres_df = pd.read_csv('../../data/pres.csv')\n",
    "pres_df2016 = pres_df[pres_df.year == 2016]\n",
    "pres_df2016['fips'] = pres_df2016['FIPS']\n",
    "pres_df2016 = pres_df2016.drop(['FIPS', 'Unnamed: 0'], axis=1)\n",
    "\n",
    "pres_df2020 = pd.read_csv('../../data/pres2020.csv')\n",
    "pres_df2020['fips'] = pres_df2020['FIPS']\n",
    "pres_df2020 = pres_df2020.drop(['FIPS', 'Unnamed: 0'], axis=1)\n",
    "\n",
    "census2015 = pd.read_csv('../../data/df2015.csv')\n",
    "census2019 = pd.read_csv('../../data/df2019.csv')\n",
    "census2015 = census2015.drop(['Unnamed: 0','unnamed:_0'], axis=1)\n",
    "census2015['county_fip'] = census2015.county_fip.astype(str).str.zfill(3)\n",
    "census2015['state_fip'] = census2015.state_fip.astype(str).str.zfill(2)\n",
    "census2015['fips'] = census2015['state_fip']+census2015['county_fip']\n",
    "census2015 = census2015.drop(['state_fip','county_fip'], axis=1)\n",
    "census2015['fips'] = census2015['fips'].astype(int)\n",
    "\n",
    "df2015_16 = df2015_16[['fips', 'vax_percentage', 'total_agriculture', 'total_construction',\n",
    "       'total_manufacturing', 'total_wholesale_trade', 'total_retail_trade',\n",
    "       'transportation_warehousing_utilities', 'total_information',\n",
    "       'total_finance_and_real_estate',\n",
    "       'total_scientific_administrative_and_waste_management_services',\n",
    "       'total_educational_healthcare_and_social_assistance',\n",
    "       'total_arts_and_entertainment', 'total_other_services',\n",
    "       'total_public_administration',\n",
    "       'total_management_business_science_and_arts_occupations',\n",
    "       'total_service_occupations', 'total_sales_and_office_occupations',\n",
    "       'total_natural_resources_and_maintenance_occupations',\n",
    "       'total_production,_transportation,_and_material_moving_occupations',\n",
    "       'population_of_one_race_total', 'white', 'black_or_african_american',\n",
    "       'american_indian_and_alaska_native', 'asian_alone',\n",
    "       'native_hawaiian_and_other_pacific_islander',\n",
    "       'population_of_one_race_some_other_race', 'median_age:_total',\n",
    "       'ed_total', 'ed_no_schooling_completed', 'ed_nursery_school',\n",
    "       'ed_kindergarten', 'ed_1st_grade', 'ed_2nd_grade', 'ed_3rd_grade',\n",
    "       'ed_4th_grade', 'ed_5th_grade', 'ed_6th_grade', 'ed_7th_grade',\n",
    "       'ed_8th_grade', 'ed_9th_grade', 'e_10th_grade', 'ed_11th_grade',\n",
    "       'ed_12th_grade_no_diploma', 'median_income',\n",
    "       'unemployed_pop_16_years_and_over', 'in_civilian_labor_force',\n",
    "       'under_19_no_health_insurance_coverage',\n",
    "       '19_to_34_years_no_health_insurance_coverage',\n",
    "       '35_to_64_years_no_health_insurance_coverage', \n",
    "       '65_years_and_over_no_health_insurance_coverage','health_insurance_total',\n",
    "       'total_population_estimate', 'year', 'office', 'state', 'dem_votes',\n",
    "       'rep_votes', 'total_votes', 'target', 'State', 'County [2]',\n",
    "       'Population(2010)', 'Land Areami²', 'Water Areami²', 'Total Areami²',\n",
    "       'Latitude', 'Longitude']]\n",
    "\n",
    "census2019 = census2019.drop(['Unnamed: 0','unnamed:_0'], axis=1)\n",
    "census2019['county_fip'] = census2019.county_fip.astype(str).str.zfill(3)\n",
    "census2019['state_fip'] = census2019.state_fip.astype(str).str.zfill(2)\n",
    "census2019['fips'] = census2019['state_fip']+census2019['county_fip']\n",
    "census2019 = census2019.drop(['state_fip','county_fip'], axis=1)\n",
    "census2019['fips'] = census2019['fips'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "vax2015 = pd.concat([ca2015, fl2015, il2015, tx2015])\n",
    "vax2019 = pd.concat([ca2018, fl2019, il2018, tx2018, mi2018])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['CA', 'FL', 'IL', 'MI', 'TX'], dtype=object)"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pres_df2020.state.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['fips', 'vax_percentage', 'total_agriculture', 'total_construction',\n",
       "       'total_manufacturing', 'total_wholesale_trade', 'total_retail_trade',\n",
       "       'transportation_warehousing_utilities', 'total_information',\n",
       "       'total_finance_and_real_estate',\n",
       "       'total_scientific_administrative_and_waste_management_services',\n",
       "       'total_educational_healthcare_and_social_assistance',\n",
       "       'total_arts_and_entertainment', 'total_other_services',\n",
       "       'total_public_administration',\n",
       "       'total_management_business_science_and_arts_occupations',\n",
       "       'total_service_occupations', 'total_sales_and_office_occupations',\n",
       "       'total_natural_resources_and_maintenance_occupations',\n",
       "       'total_production,_transportation,_and_material_moving_occupations',\n",
       "       'population_of_one_race_total', 'white', 'black_or_african_american',\n",
       "       'american_indian_and_alaska_native', 'asian_alone',\n",
       "       'native_hawaiian_and_other_pacific_islander',\n",
       "       'population_of_one_race_some_other_race', 'median_age:_total',\n",
       "       'ed_total', 'ed_no_schooling_completed', 'ed_nursery_school',\n",
       "       'ed_kindergarten', 'ed_1st_grade', 'ed_2nd_grade', 'ed_3rd_grade',\n",
       "       'ed_4th_grade', 'ed_5th_grade', 'ed_6th_grade', 'ed_7th_grade',\n",
       "       'ed_8th_grade', 'ed_9th_grade', 'e_10th_grade', 'ed_11th_grade',\n",
       "       'ed_12th_grade_no_diploma', 'median_income',\n",
       "       'unemployed_pop_16_years_and_over', 'in_civilian_labor_force',\n",
       "       'under_19_no_health_insurance_coverage',\n",
       "       '19_to_34_years_no_health_insurance_coverage',\n",
       "       '35_to_64_years_no_health_insurance_coverage',\n",
       "       '65_years_and_over_no_health_insurance_coverage',\n",
       "       'health_insurance_total', 'total_population_estimate', 'year', 'office',\n",
       "       'state', 'dem_votes', 'rep_votes', 'total_votes', 'target', 'State',\n",
       "       'County [2]', 'Population(2010)', 'Land Areami²', 'Water Areami²',\n",
       "       'Total Areami²', 'Latitude', 'Longitude', 'insured_rate'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2015_16.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2015 = pd.merge(vax2015, census2015, on = 'fips')\n",
    "df2015_16 = pd.merge(df2015, pres_df2016, on = 'fips')\n",
    "\n",
    "<<<<<<< local\n",
    "=======\n",
    "\n",
    "\n",
    "#df2015.head()\n",
    "\n",
    "\n",
    ">>>>>>> remote\n",
    "df2015_16.to_csv('../../data/df2015_16.csv', index=False)\n",
    "\n",
    "df2019 = pd.merge(vax2019, census2019, on = 'fips')\n",
    "df2019_20 = pd.merge(df2019, pres_df2020, on = 'fips')\n",
    "df2015_16.to_csv('../../data/df2019_20.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "row_sums = []\n",
    "for row in df2015_16.index:\n",
    "    row_sums.append(df2015_16.iloc[row, 29:44].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "insurance_sums = []\n",
    "for row in df2015_16.index:\n",
    "    insurance_sums.append(df2015_16.iloc[row, 47:51].sum())\n",
    "df2015_16['insured_rate'] = insurance_sums/df2015_16.iloc[row, 52]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2015_16.iloc[:, 21:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "learn-env",
   "language": "python",
   "name": "learn-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
